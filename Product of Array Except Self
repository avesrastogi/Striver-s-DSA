/*
https://leetcode.com/problems/product-of-array-except-self/description/


Product of Array Except Self
Medium
21.1K
1.2K
company
Amazon
Asana
company
Apple
Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
 
*/




class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        // brute force
        // vector<int> res;
        // for(int i=0; i<nums.size(); i++) {
        //     int prod = 1;
        //     for(int j=0; j<nums.size(); j++) {
        //         if(i==j) continue;
        //         prod*=nums[j];
        //     }
        //     res.push_back(prod);
        // }

        // return res;

        // optimized solution
        // int n = nums.size();
        // vector<int> left(n);
        // vector<int> right(n);
        // vector<int> res(n);
        // left[0]=1;
        // for(int i=1; i<n; i++) {
        //     left[i] = left[i-1]*nums[i-1];
        // }
        
        // right[n-1] = 1;
        // for(int i=n-2; i>=0; i--) {
        //     right[i] = right[i+1]*nums[i+1];                    
        // }

        // for(int i=0; i<nums.size(); i++) {
        //     res[i] = left[i]*right[i];
        // }

        // return res;

        // futher optimized
        int n = nums.size();
        vector<int> res(n);
        res[0]=1;
        for(int i=1; i<n; i++) {
            res[i] = res[i-1]*nums[i-1];
        }
        
        int right = 1;
        for(int i=n-1; i>=0; i--) {
            res[i] *= right;
            right *= nums[i];                    
        }
        return res;        
    }
};
