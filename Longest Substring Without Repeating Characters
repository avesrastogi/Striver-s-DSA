/*
Longest Substring Without Repeating Characters
Medium
38K
1.7K
company
Amazon
company
Bloomberg
company
Apple
Given a string s, find the length of the longest 
substring
 without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.

*/

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        //unordered_map<char, int> X;
        // int maxcount = 0;
        // int left = 0;

        // for(int right =0; right<s.length(); right++) {
        //     if(X.count(s[right])==0 || X[s[right]] < left) {
        //         X[s[right]]=right;
        //         maxcount = max(maxcount, right-left+1);
        //     }
        //     else {
        //         left = X[s[right]] + 1;
        //         X[s[right]] = right;
        //     }
        // }

        // optimized
        int n = s.length();
        int maxLength = 0;
        vector<int> charIndex(128, -1);
        int left = 0;
        
        for (int right = 0; right < n; right++) {
            if (charIndex[s[right]] >= left) {
                left = charIndex[s[right]] + 1;
            }
            charIndex[s[right]] = right;
            maxLength = max(maxLength, right - left + 1);
        }
        
        return maxLength;
    }
};
