/*

Find All Duplicates in an Array
Medium
9.5K
331
company
Amazon
company
Apple
company
Microsoft
Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears once or twice, return an array of all the integers that appears twice.

You must write an algorithm that runs in O(n) time and uses only constant extra space.

 

Example 1:

Input: nums = [4,3,2,7,8,2,3,1]
Output: [2,3]
Example 2:

Input: nums = [1,1,2]
Output: [1]
Example 3:

Input: nums = [1]
Output: []
 
*/

// Dry run the solution: idea is to conside that array is from 1 to n, you can use pos as an index on the array
class Solution {
public:
    vector<int> findDuplicates(vector<int>& nums) {
        // brute force : use map
        // optimized: use nums[nums[index]] to negate

        vector<int> res;
        for(int i=0; i<nums.size(); i++) {
            int pos = abs(nums[i])-1;
            nums[pos] = -nums[pos];
            if(nums[pos]>0)
                res.push_back(pos+1);
        }

        return res;
    }
};
