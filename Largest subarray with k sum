/*

Largest subarray with 0 sum
MediumAccuracy: 41.84%Submissions: 252K+Points: 4
We know this problem is a piece of cake for you. Challenge yourself with GfG Weekly Contest 

banner
Given an array having both positive and negative integers. The task is to compute the length of the largest subarray with sum 0.

Example 1:

Input:
N = 8
A[] = {15,-2,2,-8,1,7,10,23}
Output: 5
Explanation: The largest subarray with
sum 0 will be -2 2 -8 1 7.
Your Task:
You just have to complete the function maxLen() which takes two arguments an array A and n, where n is the size of the array A and returns the length of the largest subarray with 0 sum.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(N).

Constraints:
1 <= N <= 105
-1000 <= A[i] <= 1000, for each valid i
*/

class Solution{
    public:
    int maxLen(vector<int>&arr, int n)
    {   
        map<long long, int> preSumMap;
        int sum = 0, target = 0, maxLen = 0;
        
        for(int i=0; i<arr.size(); i++) {
            sum += arr[i];
            if(sum==target) {
                maxLen = max(maxLen, i+1);
            }
            
            int remaining = sum - target;
            if(preSumMap.find(remaining)!=preSumMap.end()) {
                int len = i - preSumMap[remaining];
                maxLen = max(maxLen, len);
            }
            else {
                preSumMap[sum] = i;
            }
        }
        
        return maxLen;
    }
};

